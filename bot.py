"""
Telegram-–±–æ—Ç "–ö–∞–∫–æ–µ —É –≤–∞—Å —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?"
–ë–æ—Ç –¥–ª—è –ø–æ–ø—É–ª—è—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–ø–µ–∫–∏ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞
"""

import logging
import json
from datetime import datetime
from typing import Dict, Any, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    ContextTypes, ConversationHandler, MessageHandler, filters
)

from config import BOT_TOKEN, ZOO_CONTACT_EMAIL, ZOO_CONTACT_PHONE
from quiz_data import QUIZ_QUESTIONS, ANIMALS, GUARDIANSHIP_INFO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
START, QUIZ, FEEDBACK = range(3)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_data = {}

class QuizBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("restart", self.restart_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        self.application.add_handler(CallbackQueryHandler(self.handle_quiz_answer, pattern="^answer_"))
        self.application.add_handler(CallbackQueryHandler(self.handle_menu_action, pattern="^menu_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_feedback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = user.id
        user_data[user_id] = {
            'current_question': 0,
            'answers': {},
            'start_time': datetime.now().isoformat(),
            'quiz_completed': False
        }
        
        welcome_text = f"""
ü¶Å **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É "–ö–∞–∫–æ–µ —É –≤–∞—Å —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?"** ü¶Å

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏–∑ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–≤–æ–µ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É! 

üéØ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚Ä¢ –û—Ç–≤–µ—Ç—å –Ω–∞ {len(QUIZ_QUESTIONS)} –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –£–∑–Ω–∞–π —Å–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
‚Ä¢ –ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –æ–ø–µ–∫–∏ –∑–æ–æ–ø–∞—Ä–∫–∞
‚Ä¢ –ü–æ–¥–µ–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? üöÄ
        """
        
        keyboard = [
            [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="menu_start_quiz")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏", callback_data="menu_guardianship")],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∑–æ–æ–ø–∞—Ä–∫–æ–º", callback_data="menu_contact")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
        return START
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üéØ **–ö–∞–∫ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É:**
1. –ù–∞–∂–º–∏ "–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"
2. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–∏—Ä–∞—è –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
3. –£–∑–Ω–∞–π —Å–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
4. –ü–æ–¥–µ–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏

üêæ **–û –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏:**
–£–∑–Ω–∞–π, –∫–∞–∫ —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ –∏ –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–æ–≤!

‚ùì **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?**
–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∑–æ–æ–ø–∞—Ä–∫–æ–º" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        
        keyboard = [
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É", callback_data="menu_back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')
        return START
    
    async def restart_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart"""
        user_id = update.effective_user.id
        
        # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_data:
            user_data[user_id] = {
                'current_question': 0,
                'answers': {},
                'start_time': datetime.now().isoformat(),
                'quiz_completed': False
            }
        
        await self.start_command(update, context)
        return START
    
    async def handle_menu_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        action = query.data.split('_')[1]
        
        if action == "start_quiz":
            await self.start_quiz(query)
        elif action == "guardianship":
            await self.show_guardianship_info(query)
        elif action == "contact":
            await self.show_contact_info(query)
        elif action == "back_to_start":
            await self.start_command(update, context)
    
    async def start_quiz(self, query):
        """–ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        user_id = query.from_user.id
        
        # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        user_data[user_id] = {
            'current_question': 0,
            'answers': {},
            'start_time': datetime.now().isoformat(),
            'quiz_completed': False
        }
        
        await self.show_question(query, user_id)
    
    async def show_question(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        current_q = user_data[user_id]['current_question']
        
        if current_q >= len(QUIZ_QUESTIONS):
            await self.show_results(query, user_id)
            return
        
        question_data = QUIZ_QUESTIONS[current_q]
        question_text = f"‚ùì **–í–æ–ø—Ä–æ—Å {current_q + 1} –∏–∑ {len(QUIZ_QUESTIONS)}**\n\n{question_data['question']}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = []
        for i, option in enumerate(question_data['options']):
            keyboard.append([InlineKeyboardButton(
                option['text'], 
                callback_data=f"answer_{current_q}_{i}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query.message:
            await query.message.edit_text(question_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await query.answer(question_text)
    
    async def handle_quiz_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        _, question_id, answer_id = query.data.split('_')
        question_id, answer_id = int(question_id), int(answer_id)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        if user_id not in user_data:
            user_data[user_id] = {
                'current_question': 0,
                'answers': {},
                'start_time': datetime.now().isoformat(),
                'quiz_completed': False
            }
        
        user_data[user_id]['answers'][question_id] = answer_id
        user_data[user_id]['current_question'] = question_id + 1
        
        # –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if user_data[user_id]['current_question'] < len(QUIZ_QUESTIONS):
            await self.show_question(query, user_id)
        else:
            await self.show_results(query, user_id)
    
    async def show_results(self, query, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        if user_id not in user_data or not user_data[user_id]['answers']:
            await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        animal_scores = {}
        for question_id, answer_id in user_data[user_id]['answers'].items():
            question = QUIZ_QUESTIONS[question_id]
            option = question['options'][answer_id]
            
            for animal, weight in option['weight'].items():
                if animal not in animal_scores:
                    animal_scores[animal] = 0
                animal_scores[animal] += weight
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if animal_scores:
            winner_animal = max(animal_scores, key=animal_scores.get)
            animal_info = ANIMALS[winner_animal]
            
            # –û—Ç–º–µ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
            user_data[user_id]['quiz_completed'] = True
            user_data[user_id]['result_animal'] = winner_animal
            user_data[user_id]['completion_time'] = datetime.now().isoformat()
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_text = f"""
üéâ **–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!** üéâ

{animal_info['emoji']} **–¢–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {animal_info['name']}** {animal_info['emoji']}

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**
{animal_info['description']}

üêæ **–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ {animal_info['name'].lower()}–µ:**
{animal_info['zoo_facts']}

üíù **–û –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏:**
{animal_info['guardian_info']}

üéØ **–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º?**
            """
            
            keyboard = [
                [InlineKeyboardButton("üêæ –£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏", callback_data="menu_guardianship")],
                [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", callback_data="menu_share_result")],
                [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∑–æ–æ–ø–∞—Ä–∫–æ–º", callback_data="menu_contact")],
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â–µ —Ä–∞–∑", callback_data="menu_start_quiz")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.edit_text(result_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â–µ —Ä–∞–∑.")
    
    async def show_guardianship_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏"""
        guardianship_text = GUARDIANSHIP_INFO.format(
            email=ZOO_CONTACT_EMAIL,
            phone=ZOO_CONTACT_PHONE
        )
        
        keyboard = [
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∑–æ–æ–ø–∞—Ä–∫–æ–º", callback_data="menu_contact")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É", callback_data="menu_back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query.message:
            await query.message.edit_text(guardianship_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await query.answer(guardianship_text)
    
    async def show_contact_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        contact_text = f"""
üìû **–°–≤—è–∂–∏—Å—å —Å –ú–æ—Å–∫–æ–≤—Å–∫–∏–º –∑–æ–æ–ø–∞—Ä–∫–æ–º**

üíå **Email:** {ZOO_CONTACT_EMAIL}
üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** {ZOO_CONTACT_PHONE}

üåê **–í–µ–±-—Å–∞–π—Ç:** https://moscowzoo.ru
üì± **Telegram-–∫–∞–Ω–∞–ª:** @moscowzoo

üí¨ **–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∑–æ–æ–ø–∞—Ä–∫–∞ –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –æ:**
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏ –Ω–∞–¥ –∂–∏–≤–æ—Ç–Ω—ã–º–∏
‚Ä¢ –£—Å–ª–æ–≤–∏—è—Ö —É—á–∞—Å—Ç–∏—è
‚Ä¢ –í—ã–±–æ—Ä–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –¥–ª—è –æ–ø–µ–∫–∏
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö

üìã **–ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –º–æ–∂–µ—à—å —É–ø–æ–º—è–Ω—É—Ç—å:**
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ —Ç–µ–±—è –∂–∏–≤–æ—Ç–Ω–æ–µ
‚Ä¢ –ñ–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —É—á–∞—Å—Ç–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ

üïê **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** –ü–Ω-–í—Å 9:00-18:00
        """
        
        keyboard = [
            [InlineKeyboardButton("üêæ –£–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏", callback_data="menu_guardianship")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É", callback_data="menu_back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if query.message:
            await query.message.edit_text(contact_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await query.answer(contact_text)
    
    async def handle_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user = update.effective_user
        feedback_text = update.message.text
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        logger.info(f"Feedback from {user.id} ({user.username}): {feedback_text}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
        if user.id not in user_data:
            user_data[user.id] = {}
        
        if 'feedback' not in user_data[user.id]:
            user_data[user.id]['feedback'] = []
        
        user_data[user.id]['feedback'].append({
            'text': feedback_text,
            'timestamp': datetime.now().isoformat()
        })
        
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        response_text = """
üí¨ **–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤!**

–ú—ã —Ü–µ–Ω–∏–º —Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –µ–≥–æ –ø—Ä–∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–æ—Ç–∞.

üéØ **–ß—Ç–æ –¥–∞–ª—å—à–µ?**
‚Ä¢ –ü—Ä–æ–π–¥–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â–µ —Ä–∞–∑
‚Ä¢ –£–∑–Ω–∞–π –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏
‚Ä¢ –°–≤—è–∂–∏—Å—å —Å –∑–æ–æ–ø–∞—Ä–∫–æ–º
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="menu_start_quiz")],
            [InlineKeyboardButton("üêæ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏", callback_data="menu_guardianship")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(response_text, reply_markup=reply_markup, parse_mode='Markdown')
        return START
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        if update and update.effective_message:
            error_text = """
‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π:
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /restart
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥–æ–π /help
‚Ä¢ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, —Å–≤—è–∂–∏—Å—å —Å –∑–æ–æ–ø–∞—Ä–∫–æ–º.
            """
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="menu_start_quiz")],
                [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∑–æ–æ–ø–∞—Ä–∫–æ–º", callback_data="menu_contact")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.effective_message.reply_text(error_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting bot...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = QuizBot()
        bot.run()
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")

if __name__ == '__main__':
    main()
