"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
"""

from PIL import Image, ImageDraw, ImageFont
import os
from typing import Dict, Any
from quiz_data import ANIMALS

class ResultImageGenerator:
    def __init__(self):
        self.font_path = "arial.ttf"  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
        self.default_font_size = 24
        self.title_font_size = 36
        self.subtitle_font_size = 28
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        self.colors = {
            'background': (255, 255, 255),
            'text': (0, 0, 0),
            'title': (34, 139, 34),
            'subtitle': (70, 130, 180),
            'accent': (255, 140, 0)
        }
    
    def generate_result_image(self, animal_key: str, user_name: str = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        
        Args:
            animal_key: –ö–ª—é—á –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏–∑ ANIMALS
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        """
        if animal_key not in ANIMALS:
            raise ValueError(f"Unknown animal: {animal_key}")
        
        animal_info = ANIMALS[animal_key]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_width = 800
        img_height = 1000
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (img_width, img_height), self.colors['background'])
        draw = ImageDraw.Draw(img)
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ, –µ—Å–ª–∏ custom –Ω–µ –Ω–∞–π–¥–µ–Ω)
            try:
                title_font = ImageFont.truetype(self.font_path, self.title_font_size)
                subtitle_font = ImageFont.truetype(self.font_path, self.subtitle_font_size)
                body_font = ImageFont.truetype(self.font_path, self.default_font_size)
            except:
                # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã
                title_font = ImageFont.load_default()
                subtitle_font = ImageFont.load_default()
                body_font = ImageFont.load_default()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_text = f"–¢–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ:"
            title_bbox = draw.textbbox((0, 0), title_text, font=title_font)
            title_width = title_bbox[2] - title_bbox[0]
            title_x = (img_width - title_width) // 2
            draw.text((title_x, 50), title_text, font=title_font, fill=self.colors['title'])
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —Å —ç–º–æ–¥–∑–∏
            animal_title = f"{animal_info['emoji']} {animal_info['name']} {animal_info['emoji']}"
            animal_bbox = draw.textbbox((0, 0), animal_title, font=subtitle_font)
            animal_width = animal_bbox[2] - animal_bbox[0]
            animal_x = (img_width - animal_width) // 2
            draw.text((animal_x, 120), animal_title, font=subtitle_font, fill=self.colors['subtitle'])
            
            # –û–ø–∏—Å–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            description = animal_info['description']
            description_lines = self._wrap_text(description, body_font, img_width - 100)
            
            y_position = 200
            for line in description_lines:
                draw.text((50, y_position), line, font=body_font, fill=self.colors['text'])
                y_position += 30
            
            # –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã
            y_position += 20
            facts_title = "üêæ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã:"
            draw.text((50, y_position), facts_title, font=subtitle_font, fill=self.colors['accent'])
            y_position += 40
            
            facts = animal_info['zoo_facts']
            facts_lines = self._wrap_text(facts, body_font, img_width - 100)
            
            for line in facts_lines:
                draw.text((50, y_position), line, font=body_font, fill=self.colors['text'])
                y_position += 25
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ–∫–µ
            y_position += 20
            guardian_title = "üíù –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏:"
            draw.text((50, y_position), guardian_title, font=subtitle_font, fill=self.colors['accent'])
            y_position += 40
            
            guardian_info = animal_info['guardian_info']
            guardian_lines = self._wrap_text(guardian_info, body_font, img_width - 100)
            
            for line in guardian_lines:
                draw.text((50, y_position), line, font=body_font, fill=self.colors['text'])
                y_position += 25
            
            # –ü–æ–¥–ø–∏—Å—å
            y_position += 30
            signature = f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {user_name}"
            signature_bbox = draw.textbbox((0, 0), signature, font=body_font)
            signature_width = signature_bbox[2] - signature_bbox[0]
            signature_x = (img_width - signature_width) // 2
            draw.text((signature_x, y_position), signature, font=body_font, fill=self.colors['subtitle'])
            
            # –õ–æ–≥–æ—Ç–∏–ø –∑–æ–æ–ø–∞—Ä–∫–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
            y_position += 40
            logo_text = "üêæ –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∑–æ–æ–ø–∞—Ä–∫ üêæ"
            logo_bbox = draw.textbbox((0, 0), logo_text, font=body_font)
            logo_width = logo_bbox[2] - logo_bbox[0]
            logo_x = (img_width - logo_width) // 2
            draw.text((logo_x, y_position), logo_text, font=body_font, fill=self.colors['title'])
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            filename = f"result_{animal_key}_{user_name.lower().replace(' ', '_')}.png"
            filepath = os.path.join("generated_images", filename)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs("generated_images", exist_ok=True)
            
            img.save(filepath, "PNG")
            return filepath
            
        except Exception as e:
            print(f"Error generating image: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return None
    
    def _wrap_text(self, text: str, font, max_width: int) -> list:
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –∑–∞–¥–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            font: –®—Ä–∏—Ñ—Ç –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
            max_width: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        """
        words = text.split()
        lines = []
        current_line = ""
        
        for word in words:
            test_line = current_line + " " + word if current_line else word
            bbox = font.getbbox(test_line)
            line_width = bbox[2] - bbox[0]
            
            if line_width <= max_width:
                current_line = test_line
            else:
                if current_line:
                    lines.append(current_line)
                current_line = word
        
        if current_line:
            lines.append(current_line)
        
        return lines
    
    def create_shareable_image(self, animal_key: str, user_name: str = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
        
        Args:
            animal_key: –ö–ª—é—á –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        """
        if animal_key not in ANIMALS:
            raise ValueError(f"Unknown animal: {animal_key}")
        
        animal_info = ANIMALS[animal_key]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π (–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ)
        img_size = 1080
        img = Image.new('RGB', (img_size, img_size), self.colors['background'])
        draw = ImageDraw.Draw(img)
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
            try:
                title_font = ImageFont.truetype(self.font_path, 48)
                subtitle_font = ImageFont.truetype(self.font_path, 36)
                body_font = ImageFont.truetype(self.font_path, 24)
            except:
                title_font = ImageFont.load_default()
                subtitle_font = ImageFont.load_default()
                body_font = ImageFont.load_default()
            
            # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–º–æ–¥–∑–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            emoji_size = 200
            emoji_x = (img_size - emoji_size) // 2
            emoji_y = 100
            
            # –†–∏—Å—É–µ–º –±–æ–ª—å—à–æ–π —ç–º–æ–¥–∑–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ —ç–º–æ–¥–∑–∏)
            draw.text((emoji_x, emoji_y), animal_info['emoji'], font=title_font, fill=self.colors['accent'])
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            animal_name = animal_info['name']
            name_bbox = draw.textbbox((0, 0), animal_name, font=subtitle_font)
            name_width = name_bbox[2] - name_bbox[0]
            name_x = (img_size - name_width) // 2
            draw.text((name_x, emoji_y + 120), animal_name, font=subtitle_font, fill=self.colors['title'])
            
            # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            description = animal_info['description'][:100] + "..." if len(animal_info['description']) > 100 else animal_info['description']
            desc_lines = self._wrap_text(description, body_font, img_size - 100)
            
            y_position = emoji_y + 200
            for line in desc_lines:
                line_bbox = draw.textbbox((0, 0), line, font=body_font)
                line_width = line_bbox[2] - line_bbox[0]
                line_x = (img_size - line_width) // 2
                draw.text((line_x, y_position), line, font=body_font, fill=self.colors['text'])
                y_position += 30
            
            # –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
            y_position += 40
            cta_text = "üêæ –£–∑–Ω–∞–π –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏!"
            cta_bbox = draw.textbbox((0, 0), cta_text, font=body_font)
            cta_width = cta_bbox[2] - cta_bbox[0]
            cta_x = (img_size - cta_width) // 2
            draw.text((cta_x, y_position), cta_text, font=body_font, fill=self.colors['accent'])
            
            # –õ–æ–≥–æ—Ç–∏–ø –∏ —Å—Å—ã–ª–∫–∞
            y_position += 60
            logo_text = "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∑–æ–æ–ø–∞—Ä–∫"
            logo_bbox = draw.textbbox((0, 0), logo_text, font=body_font)
            logo_width = logo_bbox[2] - logo_bbox[0]
            logo_x = (img_size - logo_width) // 2
            draw.text((logo_x, y_position), logo_text, font=body_font, fill=self.colors['subtitle'])
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            filename = f"share_{animal_key}_{user_name.lower().replace(' ', '_')}.png"
            filepath = os.path.join("generated_images", filename)
            
            os.makedirs("generated_images", exist_ok=True)
            img.save(filepath, "PNG")
            return filepath
            
        except Exception as e:
            print(f"Error generating shareable image: {e}")
            return None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    generator = ResultImageGenerator()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    try:
        result_path = generator.generate_result_image("lion", "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        print(f"Generated result image: {result_path}")
        
        share_path = generator.create_shareable_image("lion", "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        print(f"Generated shareable image: {share_path}")
    except Exception as e:
        print(f"Error: {e}")
