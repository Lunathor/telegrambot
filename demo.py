"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
"""

import json
from datetime import datetime
from quiz_data import QUIZ_QUESTIONS, ANIMALS, GUARDIANSHIP_INFO

def print_header():
    """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("=" * 60)
    print("ü¶Å –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–û–¢–ê '–ö–ê–ö–û–ï –£ –í–ê–° –¢–û–¢–ï–ú–ù–û–ï –ñ–ò–í–û–¢–ù–û–ï?' ü¶Å")
    print("=" * 60)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã Telegram-–±–æ—Ç–∞")
    print("–±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ Telegram.")
    print()

def simulate_quiz():
    """–°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    print("üéÆ –°–ò–ú–£–õ–Ø–¶–ò–Ø –í–ò–ö–¢–û–†–ò–ù–´")
    print("-" * 40)
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'current_question': 0,
        'answers': {},
        'start_time': datetime.now().isoformat(),
        'quiz_completed': False
    }
    
    print(f"–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏–∑ {len(QUIZ_QUESTIONS)} –≤–æ–ø—Ä–æ—Å–æ–≤.")
    print("–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–∏—Ä–∞—è –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (1-4).")
    print()
    
    # –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    for i, question in enumerate(QUIZ_QUESTIONS):
        print(f"‚ùì –í–æ–ø—Ä–æ—Å {i + 1} –∏–∑ {len(QUIZ_QUESTIONS)}")
        print(f"   {question['question']}")
        print()
        
        # –ü–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        for j, option in enumerate(question['options']):
            print(f"   {j + 1}. {option['text']}")
        print()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–≤ –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
        answer_id = 0  # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ —ç—Ç–æ –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data['answers'][i] = answer_id
        
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç: {answer_id + 1}")
        print(f"   {question['options'][answer_id]['text']}")
        print("-" * 40)
        print()
    
    return user_data

def calculate_results(user_data):
    """–ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    print("üéØ –ü–û–î–°–ß–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("-" * 40)
    
    # –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤
    animal_scores = {}
    for question_id, answer_id in user_data['answers'].items():
        question = QUIZ_QUESTIONS[question_id]
        option = question['options'][answer_id]
        
        print(f"–í–æ–ø—Ä–æ—Å {question_id + 1}: {option['text']}")
        
        for animal, weight in option['weight'].items():
            if animal not in animal_scores:
                animal_scores[animal] = 0
            animal_scores[animal] += weight
            print(f"  +{weight} –±–∞–ª–ª –¥–ª—è {ANIMALS[animal]['name']} ({animal})")
        print()
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if animal_scores:
        winner_animal = max(animal_scores, key=animal_scores.get)
        animal_info = ANIMALS[winner_animal]
        
        print("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢ –í–ò–ö–¢–û–†–ò–ù–´")
        print("=" * 40)
        print(f"{animal_info['emoji']} –¢–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {animal_info['name']} {animal_info['emoji']}")
        print()
        print("üìù –û–ø–∏—Å–∞–Ω–∏–µ:")
        print(f"   {animal_info['description']}")
        print()
        print("üêæ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã:")
        print(f"   {animal_info['zoo_facts']}")
        print()
        print("üíù –û –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏:")
        print(f"   {animal_info['guardian_info']}")
        print()
        
        # –ü–æ–∫–∞–∑ –≤—Å–µ—Ö –±–∞–ª–ª–æ–≤
        print("üìä –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        sorted_animals = sorted(animal_scores.items(), key=lambda x: x[1], reverse=True)
        for animal_key, score in sorted_animals:
            animal_name = ANIMALS[animal_key]['name']
            emoji = ANIMALS[animal_key]['emoji']
            print(f"   {emoji} {animal_name}: {score} –±–∞–ª–ª–æ–≤")
        
        return winner_animal
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        return None

def show_guardianship_info():
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏"""
    print()
    print("üêæ –ü–†–û–ì–†–ê–ú–ú–ê –û–ü–ï–ö–ò –ù–ê–î –ñ–ò–í–û–¢–ù–´–ú–ò")
    print("=" * 50)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    guardianship_text = GUARDIANSHIP_INFO.format(
        email="contact@moscowzoo.ru",
        phone="+7(495)123-45-67"
    )
    
    print(guardianship_text)

def show_technical_details():
    """–ü–æ–∫–∞–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π –±–æ—Ç–∞"""
    print()
    print("üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ï–¢–ê–õ–ò –ë–û–¢–ê")
    print("=" * 40)
    
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(QUIZ_QUESTIONS)}")
    print(f"üêæ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö: {len(ANIMALS)}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: ~{len(QUIZ_QUESTIONS) * 30} —Å–µ–∫—É–Ω–¥")
    print()
    
    print("üì± –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:")
    print("   /start - –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
    print("   /restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
    print("   /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    print()
    
    print("üéØ –ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—Ç–µ–º–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:")
    print("   1. –°–∏—Å—Ç–µ–º–∞ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ (1-3 –±–∞–ª–ª–∞)")
    print("   2. –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ")
    print("   3. –í—ã–±–æ—Ä –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤")
    print()
    
    print("üñºÔ∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
    print("   - –î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º")
    print("   - –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print_header()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    user_data = simulate_quiz()
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    winner = calculate_results(user_data)
    
    # –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–µ–∫–µ
    show_guardianship_info()
    
    # –ü–æ–∫–∞–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
    show_technical_details()
    
    print()
    print("=" * 60)
    print("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 60)
    print()
    print("üì± –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞:")
    print("   1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")
    print("   2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–æ–º")
    print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python bot.py")
    print()
    print("üîó –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
    print("   - README.md - –û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    print("   - DEPLOYMENT.md - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é")
    print("   - test_bot.py - –¢–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    print()
    print("üåü –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É!")

if __name__ == '__main__':
    main()
