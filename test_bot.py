"""
–¢–µ—Å—Ç—ã –¥–ª—è Telegram-–±–æ—Ç–∞ "–ö–∞–∫–æ–µ —É –≤–∞—Å —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?"
"""

import unittest
from unittest.mock import Mock, patch, MagicMock
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from quiz_data import QUIZ_QUESTIONS, ANIMALS, GUARDIANSHIP_INFO
from image_generator import ResultImageGenerator

class TestQuizData(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    
    def test_quiz_questions_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
        self.assertIsInstance(QUIZ_QUESTIONS, list)
        self.assertGreater(len(QUIZ_QUESTIONS), 0)
        
        for question in QUIZ_QUESTIONS:
            self.assertIn('id', question)
            self.assertIn('question', question)
            self.assertIn('options', question)
            self.assertIsInstance(question['options'], list)
            self.assertGreater(len(question['options']), 0)
            
            for option in question['options']:
                self.assertIn('text', option)
                self.assertIn('weight', option)
                self.assertIsInstance(option['weight'], dict)
    
    def test_animals_data_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö"""
        self.assertIsInstance(ANIMALS, dict)
        self.assertGreater(len(ANIMALS), 0)
        
        for animal_key, animal_info in ANIMALS.items():
            self.assertIn('name', animal_info)
            self.assertIn('emoji', animal_info)
            self.assertIn('description', animal_info)
            self.assertIn('zoo_facts', animal_info)
            self.assertIn('guardian_info', animal_info)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –Ω–µ –ø—É—Å—Ç—ã–µ
            self.assertIsInstance(animal_info['name'], str)
            self.assertGreater(len(animal_info['name']), 0)
            self.assertIsInstance(animal_info['description'], str)
            self.assertGreater(len(animal_info['description']), 0)
    
    def test_guardianship_info_format(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–µ–∫–µ"""
        self.assertIsInstance(GUARDIANSHIP_INFO, str)
        self.assertGreater(len(GUARDIANSHIP_INFO), 0)
        self.assertIn('{email}', GUARDIANSHIP_INFO)
        self.assertIn('{phone}', GUARDIANSHIP_INFO)
    
    def test_question_weights_consistency(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤–µ—Å–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"""
        for question in QUIZ_QUESTIONS:
            for option in question['options']:
                weights = option['weight']
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –≤ –≤–µ—Å–∞—Ö —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ ANIMALS
                for animal_key in weights.keys():
                    self.assertIn(animal_key, ANIMALS)
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    self.assertGreaterEqual(weights[animal_key], 1)
                    self.assertLessEqual(weights[animal_key], 3)

class TestImageGenerator(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.generator = ResultImageGenerator()
    
    def test_generator_initialization(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        self.assertIsInstance(self.generator.colors, dict)
        self.assertIn('background', self.generator.colors)
        self.assertIn('text', self.generator.colors)
        self.assertIn('title', self.generator.colors)
    
    def test_text_wrapping(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞"""
        test_text = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–±–∏—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"
        
        # –ú–æ–∫–∞–µ–º —à—Ä–∏—Ñ—Ç
        mock_font = Mock()
        mock_font.getbbox.return_value = (0, 0, 100, 20)  # –®–∏—Ä–∏–Ω–∞ 100
        
        lines = self.generator._wrap_text(test_text, mock_font, 200)
        self.assertIsInstance(lines, list)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        self.assertGreaterEqual(len(lines), 1)
    
    def test_invalid_animal_key(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –∫–ª—é—á–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"""
        with self.assertRaises(ValueError):
            self.generator.generate_result_image("invalid_animal_key")
    
    def test_valid_animal_key(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"""
        # –ú–æ–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with patch('PIL.Image.new') as mock_image_new, \
             patch('PIL.ImageDraw.Draw') as mock_draw, \
             patch('os.makedirs'), \
             patch.object(Mock(), 'save') as mock_save:
            
            mock_image = Mock()
            mock_image_new.return_value = mock_image
            
            result = self.generator.generate_result_image("lion", "Test User")
            # –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            self.assertIsNotNone(result)

class TestQuizLogic(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –ª–æ–≥–∏–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    
    def test_score_calculation(self):
        """–¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤"""
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_answers = {
            0: 0,  # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å, –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç
            1: 1,  # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å, –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç
            2: 2   # –¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å, —Ç—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç
        }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –≤—Ä—É—á–Ω—É—é
        animal_scores = {}
        for question_id, answer_id in mock_answers.items():
            question = QUIZ_QUESTIONS[question_id]
            option = question['options'][answer_id]
            
            for animal, weight in option['weight'].items():
                if animal not in animal_scores:
                    animal_scores[animal] = 0
                animal_scores[animal] += weight
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–ª—ã –ø–æ–¥—Å—á–∏—Ç–∞–Ω—ã
        self.assertGreater(len(animal_scores), 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –∏–º–µ—é—Ç –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã
        for score in animal_scores.values():
            self.assertGreaterEqual(score, 0)
    
    def test_winner_determination(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–∞–ª–ª—ã
        test_scores = {
            'lion': 5,
            'tiger': 8,
            'elephant': 3,
            'monkey': 6
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner = max(test_scores, key=test_scores.get)
        self.assertEqual(winner, 'tiger')
        self.assertEqual(test_scores[winner], 8)

class TestDataIntegrity(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def test_all_animals_in_questions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö"""
        animals_in_questions = set()
        
        for question in QUIZ_QUESTIONS:
            for option in question['options']:
                animals_in_questions.update(option['weight'].keys())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –∏–∑ ANIMALS –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö
        for animal_key in ANIMALS.keys():
            self.assertIn(animal_key, animals_in_questions)
    
    def test_question_ids_sequential(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ID –≤–æ–ø—Ä–æ—Å–æ–≤"""
        question_ids = [q['id'] for q in QUIZ_QUESTIONS]
        expected_ids = list(range(1, len(QUIZ_QUESTIONS) + 1))
        self.assertEqual(question_ids, expected_ids)
    
    def test_option_weights_not_empty(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–µ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –ø—É—Å—Ç—ã–µ"""
        for question in QUIZ_QUESTIONS:
            for option in question['options']:
                self.assertGreater(len(option['weight']), 0)

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    test_suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    test_suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestQuizData))
    test_suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestImageGenerator))
    test_suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestQuizLogic))
    test_suite.addTest(unittest.TestLoader().loadTestsFromTestCase(TestDataIntegrity))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return result.wasSuccessful()

if __name__ == '__main__':
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Telegram-–±–æ—Ç–∞...")
    print("=" * 50)
    
    success = run_tests()
    
    print("=" * 50)
    if success:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏.")
    
    print("\nüéØ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("üì± –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python bot.py")
